#!/bin/bash

# Script to set up fundraising development environment

set -euo pipefail

FR_CORE_BRANCH="fundraising/REL1_35"
PAYMENTS_SRC_DIR="payments"
PAYMENTS_LANG="en"
PAYMENTS_PASSWORD="dockerpass"
DEFAULT_XDEBUG_PORT=9000
DEFAULT_PAYMENTS_PORT=9001

# Moves file $1 to $1.bkup{n}, where n is the final number of the last backup + 1
backup () {
	i=0
	while [[ -e ${1}.bkup${i} || -L ${1}.bkup${i} ]]; do
		i=$((i+1))
	done
	mv $1 ${1}.bkup${i}
}

# Moves $1 to $2, backing up $2 if it's not identical to $1
backup_mv () {
	if [[ -e $2 || -L $2 ]] && ! cmp -s $1 $2; then
		echo "$2 contains customizations. Backing up."
		backup $2
	fi
	echo "Writing new $2"
	mv $1 $2
}

validate_port () {
	input=${1:-$2}
	while ! [[ $input =~ ^[0-9]+$ ]]; do
		read -p "Please enter a valid port [default $2]: " input
		input=${input:-$2}
	done
	echo $input
}

# Output all commands except... a few. See
# https://stackoverflow.com/questions/33411737/bash-script-print-commands-but-do-not-print-echo-command/33412142
trap '! [[ "$BASH_COMMAND" =~ ^(echo|read|if|\[ |\[\[ |cat|sleep|printf|cmp|cp|backup|[A-Za-z_]*=) ]] && \
cmd=`eval echo "$BASH_COMMAND" 2>/dev/null` && ! [[ -z $cmd ]] && echo "$cmd"' DEBUG

echo
echo "****** Setting up fundraising development environment *****"
echo

# Check for existing containers for this application

if ! [[ -z $(docker-compose ps -q) ]]; then
	read -p "Existing containers found for this Docker application. Remove them? [yN] " -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		docker-compose down
	else
		docker-compose stop
	fi
	echo
fi

# GIT_REVIEW_USER environment variable is needed to fetch source code

if [ -z "${GIT_REVIEW_USER:-}" ]; then
	echo "**** Set up git review"
	read -p "Git review user: " GIT_REVIEW_USER
	echo "To skip this step next time, set the GIT_REVIEW_USER environment variable."
	echo
else
	echo "**** Git review user from GIT_REVIEW_USER environment variable: ${GIT_REVIEW_USER}"
	echo
fi

echo "**** Set up source code"

clone_mw=true
if [ -d "src/${PAYMENTS_SRC_DIR}" ]; then
	read -p "src/${PAYMENTS_SRC_DIR} exists. Remove and re-clone payments wiki source? [yN] " -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		rm -rf src/${PAYMENTS_SRC_DIR}
	else
		clone_mw=false
	fi
	echo
fi

if [ $clone_mw = true ]; then
	echo "**** Cloning and setting up Mediawiki source code in src/${PAYMENTS_SRC_DIR}"
	git clone "ssh://${GIT_REVIEW_USER}@gerrit.wikimedia.org:29418/mediawiki/core" \
		--depth=10 --no-single-branch \
		src/${PAYMENTS_SRC_DIR} && \
		scp -p -P 29418 ${GIT_REVIEW_USER}@gerrit.wikimedia.org:hooks/commit-msg \
		"src/${PAYMENTS_SRC_DIR}/.git/hooks/"

	cd src/${PAYMENTS_SRC_DIR}
	git checkout --track remotes/origin/${FR_CORE_BRANCH}
	git submodule update --init --recursive

	# For DonationInterface and FundraisingEmailUnsubscribe, we want to be on the master branch for
	# development purposes. Other extensions should stay at the version indicated by the submodule
	# pointer for the FR_CORE_BRANCH.
	cd extensions/DonationInterface
	git checkout master
	cd ../FundraisingEmailUnsubscribe
	git checkout master

	cd ../../../
	echo
fi

echo "**** Set up private config repo"

clone_private=true
if [ -d "config/private" ]; then
	read -p "config/private exists. Remove and re-clone private config repo? [yN] " -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		rm -rf config/private
	else
		clone_private=false
	fi
	echo
fi

if [ $clone_private = true ]; then
	read -p "Remote address for private config repo: " private_remote
	echo

	echo "**** Cloning private config repo in config/private"
	git clone $private_remote config/private
	echo
fi

echo "**** Network configuration"

read -p "Port for XDebug [$DEFAULT_XDEBUG_PORT]: " xdebug_port
xdebug_port=$(validate_port $xdebug_port $DEFAULT_XDEBUG_PORT)

read -p "Port for Payments https [$DEFAULT_PAYMENTS_PORT]: " FR_DOCKER_PAYMENTS_PORT
FR_DOCKER_PAYMENTS_PORT=$(validate_port $FR_DOCKER_PAYMENTS_PORT $DEFAULT_PAYMENTS_PORT)

echo
echo "**** Creating .env file"

cat << EOF > /tmp/.env
COMPOSE_PROJECT_NAME=fundraising-dev
FR_DOCKER_PAYMENTS_PORT=${FR_DOCKER_PAYMENTS_PORT}
FR_DOCKER_UID=$(id -u)
FR_DOCKER_GID=$(id -g)
EOF

backup_mv /tmp/.env .env

cat .env
echo

echo "**** Creating XDebug configuration"
cat << EOF > /tmp/payments-xdebug-cli.ini
#### Customize xdebug settings for payments here
#### Note: This file is automatically generated by setup.sh and is ignored by git, so
#### changes will not be tracked. For defaults, see setup.sh.
#### Note: remote_host, remote_log and remote_enable settings are set inside the container
#### from /srv/config/internal/xdebug-common.ini. However, they can be overriden here.

xdebug.remote_port=$xdebug_port
xdebug.remote_autostart=off
EOF

cp /tmp/payments-xdebug-cli.ini /tmp/payments-xdebug-web.ini

backup_mv /tmp/payments-xdebug-cli.ini config/payments-xdebug-cli.ini
backup_mv /tmp/payments-xdebug-web.ini config/payments-xdebug-web.ini
echo

echo "**** Check for existing mariadb databases"

if ! [[ -z $(find dbdata/ ! \( -name 'dbdata' -o -name '.gitignore' \)) ]]; then
	read -p "Existing mariadb contents found. Erase all databases? [yN] " -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		find dbdata/ ! \( -name 'dbdata' -o -name '.gitignore' \) -exec rm -rf {} +
	fi
else
	echo "No database contents found"
fi
echo

echo "**** Start application"
docker-compose up -d
echo

# Wait for db service

echo "**** Waiting for database to be ready"
while ! docker-compose exec payments \
	mysqladmin ping -h database -u root --silent > /dev/null; do
	sleep 0.5 && printf '.'
done
echo "Database ready"
echo

echo "**** Composer"

read -p "Run composer install? [Yn] " -r
if [[ $REPLY =~ ^[Yy]$ ]] || [ -z $REPLY ]; then
	# TODO put this in a separate script
	docker-compose exec -w "/var/www/html/" payments composer install
fi
echo

# if LocalSettings exists, ask about replacing or skipping install step

echo "**** Payments: install.php, LocalSettings.php and update.php"

payments_install=true
localsettings_fn=src/${PAYMENTS_SRC_DIR}/LocalSettings.php

# Prepare customized LocalSettings.php
	cat << EOF > /tmp/LocalSettings.php
<?php
require( '/srv/config/exposed/payments-LocalSettings.php');
EOF

if [[ -e $localsettings_fn || -L $localsettings_fn ]]; then
	read -p \
		"Run install.php and set up LocalSettings.php? [yN] " \
		-r
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		# Back up LocalSettings.php if it's not the standard version
		if ! cmp -s $localsettings_fn /tmp/LocalSettings.php; then
			echo "LocalSettings.php contains customizations. Backing it up."
			backup $localsettings_fn
		else
			rm $localsettings_fn
		fi
	else
		payments_install=false
	fi
fi

if [ $payments_install = true ]; then
	echo "**** Running maintenance/install.php"
	docker-compose exec -w "/var/www/html/" payments php maintenance/install.php \
		--server https://localhost:${FR_DOCKER_PAYMENTS_PORT} \
		--dbname=payments \
		--dbuser=root \
		--dbserver=database \
		--lang=${PAYMENTS_LANG} \
		--scriptpath="" \
		--pass=${PAYMENTS_PASSWORD} Payments admin

	echo "Writing $localsettings_fn"
	mv /tmp/LocalSettings.php $localsettings_fn
	echo
fi

echo "**** maintenance/update.php"

payments_update=true

# Only ask about running update.php if we didn't run install.php; otherwise we have to run it.
if [ $payments_install = false ]; then
	read -p "Run update.php? [yN] " -r
	echo
	if ! [[ $REPLY =~ ^[Yy]$ ]]; then
		payments_update=false
	fi
fi

if [ $payments_update = true ]; then
	docker-compose exec -w "/var/www/html/" payments php maintenance/update.php --quick
fi
