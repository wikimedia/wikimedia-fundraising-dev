<?php
# This file should be required by LocalSettings.php for the Fundraising development setup.

#############################################################################
### Begin settings generated by maintenance/install.php                   ###
### A few of these settings have been tweaked manually, but the original  ###
### structure and comments are left intact.                               ###
#############################################################################

# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "Donut";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "/w";
$wgRestrictDisplayTitle = false;
$wgArticlePath = '/wiki/$1';

## The protocol and server name to use in fully-qualified URLs
$wgServer = WebRequest::detectServer();

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "fr-tech@wikimedia.org"; ### tweaked from auto-generated settings
$wgPasswordSender = "fr-tech@wikimedia.org"; ### tweaked from auto-generated settings

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "database";
$wgDBname = "donut";
$wgDBuser = "root";
$wgDBpassword = "";

# MySQL specific settings
$wgDBprefix = "";

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

## Shared memory settings
$wgMainCacheType = CACHE_ACCEL;
# $wgMemCachedServers = []; ### Auto-generated file sets this to an empty array. We set it below.

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = false;
#$wgUseImageMagick = true;
#$wgImageMagickConvertCommand = "/usr/bin/convert";

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = false;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "C.UTF-8";

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
##
#### Note for fundraising-dev repo: This is set further down.
#$wgCacheDirectory = "$IP/cache";

# Site language code, should be one of the list in ./languages/data/Names.php
$wgLanguageCode = "en";

$wgSecretKey = "90bbdcbb8c8340c02e73eecfe1decedd597a7764193c67f4914424ac976d0930";

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "20f659bc4f801f3e";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'vector', 'monobook':
$wgDefaultSkin = "vector";

# Default skin for mobile view. To manually switch, use the URL parameter useformat=mobile
$wgDefaultMobileSkin = 'minerva';

# Enabled skins.
# The following skins were automatically enabled:
wfLoadSkin( 'Vector' );
wfLoadSkin( 'MinervaNeue' );

# End of automatically generated settings.
# Add more configuration options below.

##########################################################
### End settings generated by maintenance/install.php  ###
##########################################################

# TODO Check whether the settings included in DevelopmentSettings.php
# are appropriate, especially as regards logging, and maybe enable this:
# require_once "$IP/includes/DevelopmentSettings.php";

##########################################################
### Begin payments-specific general Mediawiki settings ###
##########################################################

# Prevent server- and client-side caching of page content
$wgParserCacheType = CACHE_NONE;
$wgCachePages = false;
$wgUseFileCache = false;

### Settings below are based on settings for staging in the localsettings repo,
### at commit c6a5b1dac95876199.

# TODO Check all these, too.

# $wgUseFileCache and $wgFileCacheDirectory omitted here; see above
$wgCacheDirectory = '/tmp/'; # Different value from staging
$wgLocalisationUpdateDirectory = "{$wgCacheDirectory}/l10n";

# TODO Move this elsewhere
# If PHP's memory limit is very low, some operations may fail.
ini_set( 'memory_limit', '256M' );

# TODO Maybe move this elsewhere, too
if ( $wgCommandLineMode ) {
	if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
		die( "This script must be run from the command line\n" );
	}
}

### Logging setup
# See https://phabricator.wikimedia.org/T107918 for initial discussion of this setup
$defaultProcessors = array(
	'wiki' => array(
		'class' => 'MediaWiki\Logger\Monolog\WikiProcessor',
	),
	'psr' => array(
		'class' => 'Monolog\Processor\PsrLogMessageProcessor',
	),
	'pid' => array(
		'class' => 'Monolog\Processor\ProcessIdProcessor',
	),
	'uid' => array(
		'class' => 'Monolog\Processor\UidProcessor',
	),
	'web' => array(
		'class' => 'Monolog\Processor\WebProcessor',
	),
);

$syslogLogger = array(
	'handlers' => array( 'syslog' ),
	'processors' => array_keys( $defaultProcessors ),
);

$wgMWLoggerDefaultSpi = array(
	'class' => 'MediaWiki\Logger\MonologSpi',
	'args' => array( array(
		'formatters' => array(
			'line' => array(
				'class' => 'Monolog\Formatter\LineFormatter',
				'args' => array( 'mediawiki[%extra.process_id%]: %message%' ),
			),
		),
		'handlers' => array(
			'syslog' => array(
				'class' => 'MediaWiki\Logger\Monolog\SyslogHandler',
				'args' => array(
					'mediawiki',
					# Sending to external logger since local syslog only listens on
					# socket
					getenv( "FR_DOCKER_LOGGER_HOST" ),
					9514,
					LOG_USER,
					# For extremely verbose MW logs, set this to DEBUG
					Monolog\Logger::INFO,
				),
				'formatter' => 'line',
			),
		),
		'loggers' => array(
			'@default' => $syslogLogger,
		),
		'processors' => $defaultProcessors,
	), ),
);

### Debug and log settings
# TODO Make sure we get whatever would go in the file set by wgDBerrorLog.
$wgDevelopmentWarnings = true;
$wgShowExceptionDetails = true;
$wgShowHostnames = true;
$wgDebugRawPage = true;

### This line is Docker-specific. On staging, we set this using $hwgMemCachedServers,
### which in turn is set in /etc/LocalSettings.php. Also, note that the empty value for
### $wgMemCachedServers auto-generated by Mediawiki's install.php is commented out in the
### section from that script, above.
$wgMemCachedServers = [ 'memcached:11211' ];

$wgSessionsInObjectCache = true;
$wgSessionCacheType = CACHE_MEMCACHED;

# Commenting out this line from staging config, since it's probably not what
# we want.
# $wgObjectCacheSessionExpiry = 24 * 60 * 60;

$wgRawHtml = true;

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
$wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );

$wgGroupPermissions['*']['createaccount'] = true;
$wgGroupPermissions['user']['edit'] = true;
$wgGroupPermissions['sysop']['edit'] = true;
$wgGroupPermissions['adminstrator']['translate'] = true;
$wgGroupPermissions['adminstrator']['translate-manage'] = true;
$wgGroupPermissions['translateadmin']['translate-groupreview'] = true;
$wgGroupPermissions['translateadmin']['banner-protect'] = true;
$wgGroupPermissions['centralnoticeadmin']['banner-protect'] = true;
$wgGroupPermissions['centralnoticeadmin']['centralnotice-admin'] = true;
$wgGroupPermissions['centralnoticeadmin']['editinterface'] = true;
$wgGroupPermissions['centralnoticeadmin']['translate'] = true;

$wgBlockDisablesLogin = true;
$wgAutoCreateTempUser = [
	'enabled' => true,
	'actions' => [ 'edit' ],
    'genPattern' => '*Unregistered $1*',
    'matchPattern' => '*$1',
    'serialProvider' => [ 'type' => 'local' ],
    'serialMapping' => [ 'type' => 'plain-numeric' ],
];

$wgAllowUserCss = false;

$wgTranslateLanguages = [ 'en', 'es', 'fr' ];

# Pages matching this pattern will have stricter translation rules
# governed by the FundraisingTranslateWorkflow extension
$wgFundraisingTranslateWorkflowPagePatterns = array( '/.*entralnotice.*/' );
# Only users with centralnotice-admin rights can publish translations matching the pattern above
$wgTranslateWorkflowStates = array(
	'new' => array( 'color' => 'FF0000' ), // red
	'needs_proofreading' => array( 'color' => '0000FF' ), // blue
	'ready' => array( 'color' => 'FFFF00' ), // yellow
	'published' => array(
		'color' => '00FF00', // green
		'right' => 'centralnotice-admin',
	),
);

$wgCentralNoticeAdminGroup = 'centralnoticeadmin';

$wgCentralNoticeBannerProtection = true;
# Banners created via the CentralNotice UI will only be editable
# by people who have this right
$wgCentralNoticeMessageProtectRight = 'banner-protect';

# Enable the CentralNotice admin UI on this wiki
$wgNoticeInfrastructure = true;
# List of target wikis for CentralNotice banners
$wgNoticeProjects = [ 'Donut' ];
$wgCentralHost = $wgServer;
$wgNoticeProject = 'Donut';
$wgNoticeCookieDomain = parse_url( $wgServer, PHP_URL_HOST );
if ( parse_url( $wgServer, PHP_URL_PORT ) ) {
	$wgNoticeCookieDomain .= ':' . parse_url( $wgServer, PHP_URL_PORT );
}
$wgNoticeUseTranslateExtension = true;
$wgNoticeNumberOfControllerBuckets = 2;
# Don't try to do client-side GeoIP location
$wgCentralNoticeGeoIPBackgroundLookupModule = false;
$wgCentralNoticeContentSecurityPolicy = "default-src data: blob: 'unsafe-inline' 'unsafe-eval' 'self';";

# Enable running QUnit JavaScript tests via Special:JavaScriptTest
$wgEnableJavaScriptTest = true;

wfLoadExtensions( [
	'CentralNotice',
	'CodeEditor',
	'CodeMirror',
	'DonationInterface',
	'EventLogging',
	'FundraiserLandingPage',
	'FundraisingTranslateWorkflow',
	'LandingCheck',
	'Linter',
	'MobileFrontend',
	'ParserFunctions',
	'Scribunto',
	'TemplateSandbox',
	'TemplateStyles',
	'Translate',
	'UniversalLanguageSelector',
	'WikiEditor',
] );


### Include optional settings not tracked by git
if ( file_exists ( '/srv/config/exposed/donut/LocalSettings-local.php' ) )
    require( '/srv/config/exposed/donut/LocalSettings-local.php' );
